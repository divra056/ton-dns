"Asm.fif" include
"TonUtil.fif" include

{ -1 -rot runvm } : runvm_external

"../manual-dns.fif" include <s =: code

1 =: seqno 
"test/id1.pk" load-generate-keypair =: privkey1 =: pubkey1 cr

<b
    seqno 32 u,
    pubkey1 B, 
    null dict, // empty root dict
b> =: storage

{ // make-message
  <b
    swap 32 u, // seqno
    0 32 u,    // method
    <b
      rot $,   // name
    b> ref,
    swap ref,  // dict
  b>
  tuck hashB swap ed25519_sign
  <b
    swap B,    // signature
    swap <s s, // message
  b> <s
} : make-message // private-key dns-dict name seqno - signed-message-slice

// creating message
<b 0xAA 256 u, 1 dictnew   16 b>idict! drop // we know this succeeds
<b 0xBB 256 u, swap 2 swap 16 b>idict! drop
<b 0xCC 256 u, swap 3 swap 16 b>idict! drop
<b 0xDD 256 u, swap -1 swap 16 b>idict! drop =: dict

privkey1 dict "ru" seqno make-message =: signed-message

."Original storage: " cr cr storage <s csr. cr

."Message: ru" cr cr signed-message csr. cr

signed-message code storage runvm_external =: storage =: exit_code cr
."Result #1: " cr
."Exit code " exit_code . cr
."Updated storage: " cr storage <s csr. cr

."Testing seqno" cr
85143 code storage runvm =: storage =: exit_code cr
."Result #3: " cr
."Exit code " exit_code . cr
."Return values: " .s cr drop

{
  2dup swap ."Testing dnsresolve " type space . cr
  swap $>s swap 123660 code storage runvm cr
  ."Result: " cr
  ."Exit code " drop . cr
  ."Return values: " .s cr nip
  ." => " dup null? { ."(null)" drop } { <s csr. } cond cr cr
} : dnsresolve // name category -

"ru" 1 dnsresolve
"ru" 2 dnsresolve
"ru" 0 dnsresolve
"ru.yandex" 0 dnsresolve
"org" 1 dnsresolve
.s

."Testing dnsresolve <ru\0org> 3" cr
<b "ru" $, 0 8 u, "org" $, b> <s 3 123660 code storage runvm cr
."Result: " cr
."Exit code " drop . cr
."Return values: " .s cr nip
." => " dup null? { ."(null)" drop } { <s csr. } cond cr cr