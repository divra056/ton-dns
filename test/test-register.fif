"Asm.fif" include
"TonUtil.fif" include

{ -1 -rot runvm } : runvm_external

"../manual-dns.fif" include <s =: code

"test/out/id1.pk" load-keypair =: privkey1 =: pubkey1
"test/out/id2.pk" load-keypair =: privkey2 =: pubkey2 cr

<b
    10 32 u, // seqno
    pubkey1 B, 
    b{0} s, // empty root dict
b> =: storage

<b
    10 32 u, // seqno
    0 32 u, // method
    <b
        "ru" $, // name
    b> ref,
    <b 
        42 16 u, // category
        42 256 u, // dns-value
    b> ref,
b> =: message
message hashB privkey1 ed25519_sign =: signature
<b
    signature B,
    message <s s,
b> <s =: signed-message

."Message #1: ru 42 <pubkey2>" cr
."Signature: " cr signature Bx. cr
."Content: "   cr message <s csr.
."Result: "    cr signed-message csr. cr

."Original storage: " cr storage <s csr. cr

."Checking signature localy: " message hashB signature pubkey1 ed25519_chksign x. cr cr

signed-message code storage runvm_external =: storage =: exit_code cr
."Result #1: " cr
."Exit code " exit_code . cr
."Updated storage: " cr storage <s csr. cr

<b
    11 32 u, // seqno
    0 32 u, // method
    <b
        "org" $, // name
    b> ref,
    <b 
        44 16 u, // category
        10 256 u, // dns-value
    b> ref,
b> =: message
message hashB privkey1 ed25519_sign =: signature
<b
    signature B,
    message <s s,
b> <s =: signed-message

."Message #2: org 44 <pubkey2>" cr

signed-message code storage runvm_external =: storage =: exit_code cr
."Result #2: " cr
."Exit code " exit_code . cr
."Updated storage: " cr storage <s csr. cr

."Testing seqno" cr
85143 code storage runvm =: storage =: exit_code cr
."Result #3: " cr
."Exit code " exit_code . cr
."Return values: " .s cr drop

."Testing dnsresolve ru 0" cr
"ru" $>s 0 123660 code storage runvm =: storage =: exit_code cr
."Result #4: " cr
."Exit code " exit_code . cr
."Storage: " cr storage <s csr. cr
."Return values: " .s ." => " dup null? { ."(null)" drop } { <s csr. } cond cr drop

."Testing dnsresolve com 0" cr
"org" $>s 0 123660 code storage runvm =: storage =: exit_code cr
."Result #5: " cr
."Exit code " exit_code . cr
."Storage: " cr storage <s csr. cr
."Return values: " .s ." => " dup null? { ."(null)" drop } { <s csr. } cond cr drop

."Testing dnsresolve com 0" cr
"com" $>s 0 123660 code storage runvm =: storage =: exit_code cr
."Result #6: " cr
."Exit code " exit_code . cr
."Storage: " cr storage <s csr. cr
."Return values: " .s ." => " dup null? { ."(null)" drop } { <s csr. } cond cr drop
