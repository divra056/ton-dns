;; // Manual DNS smart contract
;; // 
;; // 1) Processes external messages signage by the owner (public key storage)
;; // 2) Register new entries by signage external messages
;; // 3) Option to change owner
;; // 4) Responds to dnsresolve
;; // 
;; // - no seqno for now
;; // 

() main(slice signed_message) impure { 
  
  var storage = get_data().begin_parse();
  var public_key = storage~load_uint(256);
  
  var (signature, message) = (signed_message~load_bits(512), signed_message);
  throw_unless(32, check_signature(slice_hash(message), signature, public_key));
  
  var opcode = signed_message~load_uint(8);
  throw_unless(33, opcode <= 1);
  
  accept_message();

  if opcode == 0 { ;; // register

  } 
  
  if opcode == 1 { ;; // change owner
    var new_public_key = signed_message~load_uint(256);
    
    var new_storage = begin_cell();
    new_storage~store_uint(new_public_key, 256);
    set_data(new_storage.end_cell());
  }
}

;; // Get methods

int answer() method_id {
  return 42;
}

(int, cell) dnsresolve() method_id {
  return (42, new_dict());
}
