#!/usr/bin/env fift -s
"TonUtil.fif" include

{ ."usage: " @' $0 type ." <smc-address> <private-key> <subdomain> <entries> <seqno> [<savefile>]" cr
  ."Creates change owner request for Manual DNS smart contract" cr
  ."<smc-address>  [*.addr] contract address" cr
  ."<private-key>  [*.pk] private key" cr
  ."<subdomain>    name for subdomain to register" cr
  ."<entries>      [*.txt] text file with dns entries for subdomain" cr
  ."<seqno>        current seqno" cr
  ."<savefile>     [*.boc] output file (default 'register.boc')" cr cr
  ."Entries file should contain lines `ENTRY <category> <value>` where <category> is a 16-bit DNS category and <value> is base64url-encoded DNS value. "
  ."NOTE: This message will overwrite current DNS entries for domain."
  1 halt
} : usage
{ ' usage if } : ?usage

$# 5 < ?usage
$# 6 > ?usage
$1 load-address 2=: smc-address
."Smart contract address = " smc-address 2dup .addr cr 6 .Addr cr
$2 load-keypair nip =: private-key
$3 =: subdomain
$4 =: entries-file
$5 parse-int =: seqno
def? $6 { @' $6 } { "register.boc" } cond =: savefile

// B - s
{ <b swap B, b> <s } : B>s
// wc addr - B
{ 
  <b 
    rot 8 i,
    swap 256 u,
  b> <s
} : smca>s

// predefined entry types - more can be added
{ 0 word parse-smc-addr drop smca>s } : address
{ 0 word file>B B>s } : file 
{ 0 word base64>B B>s } : base64
{ 0 word base64url>B B>s } : base64url
{ 0 word $>B B>s } : text
{ 0 word x>B B>s } : hex

// string - cat
{ 
  dup 16 fits not abort"category must fit in 16 bits"
} : parse-category
// D cat val â€“ D'
{
  swap rot 16  idict! 1+ abort"failed to add entry to dictionary"
} : add-entry

// D category '=>' <entry-type> <string> - D'
{ 
  parse-category  
  bl word find not abort"`=>` must be followed by entry type" 1 swap (execute) 
  add-entry 
} : =>

dictnew
entries-file include 

<b
  seqno 32 u,
  0 32 u, // op=0 (register)
  <b
    subdomain $,
  b> ref,
  swap dict, // dict
b> =: message
message hashB private-key ed25519_sign =: signature
<b 
  b{1000100} s, 
  smc-address addr, 
  0 Gram, 
  b{01} s,
  <b
    signature B,
    message <s s,
  b> ref,
b>
."Content: " cr message <s csr.
dup ."Resulting external message: " cr <s csr. cr
2 boc+>B dup Bx. cr
savefile tuck B>file
."Saved external message to file: " type cr
