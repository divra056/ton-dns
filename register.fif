#!/usr/bin/env fift -s
"TonUtil.fif" include

{ ."usage: " @' $0 type ." <filename-base> <seqno> <subdomain> <category> <dns-value> <savefile>" cr
  ."Creates a request to advanced wallet created by new-wallet-v2.fif, with private key loaded from file <filename-base>.pk "
  ."and address from <filename-base>.addr, and saves it into <savefile>.boc ('wallet-query.boc' by default)" cr 1 halt
} : usage
{ ' usage if } : ?usage

$# 6 <> ?usage

true constant bounce

$1 =: filename-base
$2 parse-int =: seqno
$3 =: subdomain
$4 parse-int =: category // TODO: check valid category
$5 =: dns-value
$6 =: savefile

3 constant send-mode  // mode for SENDRAWMSG: +1 - sender pays fees, +2 - ignore errors
60 constant timeout   // external message expires in 60 seconds

filename-base +".addr" load-address
2dup 2constant wallet_addr
."Source wallet address = " 2dup .addr cr 6 .Addr cr
filename-base +".pk" load-keypair nip constant wallet_pk

<b 
    0 32 u, // method?
    subdomain $, 
    category 32 u, // category length in bits
    dns-value $,
b> 
constant body-cell

."Register subdomain " subdomain type 
    ." seqno=" seqno .  
    ." category=" category 
    . ." dns-value=" dns-value type cr

// create a message
<b 
    b{01} s, // what is this? send-mode?
    bounce 1 i, 
    b{000100} s, 
    0 9 64 32 + + 1+ u, // 0 (64 + 32 + 9 + 1) u, ??????? wtf
    body-cell // decide if body fits or not
      <s 2dup s-fits? not rot over 1 i, -rot 
          { drop body-cell ref, } 
          { s, } cond
b>
<b 
    seqno 32 u, 
    now timeout + 32 u, 
    send-mode 8 u, 
    swap ref, 
b>

dup ."signing message: " <s csr. cr
dup hashu wallet_pk ed25519_sign_uint

<b 
    b{1000100} s, 
    wallet_addr addr, 
    0 Gram, 
    b{00} s,
    swap B, 
    swap <s s, 
b>
dup ."resulting external message: " <s csr. cr

2 boc+>B dup Bx. cr
savefile +".boc" tuck B>file
."Query expires in " timeout . ."seconds" cr
."(Saved to file " type .")" cr
