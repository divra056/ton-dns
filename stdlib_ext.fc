;;// Equivalent to begin_cell().store_slice(s).end_cell()
cell to_cell(slice s) 
    asm "NEWC" "SWAP" "STSLICER" "ENDC";

;;// returns (0, null)
(int, cell) not_found() 
  asm() "ZERO" "NULL";

;;// PFXDICTGETQ (s D n – s' x s'' −1 or s')
;;// returns (found_prefix_key, found_value, remainder_of_key, found?=-1) or (null, null, key, 0)
(slice, slice, slice, int) pfxdict_get?(cell dict, int max_key_len, slice key) 
  asm(key dict max_key_len) "PFXDICTGETQ" "NULLROTRIFNOT" "NULLROTRIFNOT";

;;// PFXDICTGET  (s D n – s' x s'' )
;;// returns (found_prefix_key, found_value, remainder_of_key) or throws deserialization failure exception
(slice, slice, slice) pfxdict_get!(cell dict, int max_key_len, slice key) 
  asm(key dict max_key_len) "PFXDICTGET";

;;// PFXDICTSET (x k D n – D' −1 or D 0)
;;// returns (modified_dict, ok?=-1) or (dict, 0)
(cell, int) pfxdict_set(cell dict, int max_key_len, slice key, slice value) 
  asm(value key dict max_key_len) "PFXDICTSET";

;;// PFXDICTREPLACE (x k D n – D' −1 or D 0) - like SET but fails if key is not present
;;// returns (dict, ok?)
(cell, int) pfxdict_replace(cell dict, int max_key_len, slice key, slice value) 
  asm(value key dict max_key_len) "PFXDICTREPLACE";

;;// PFXDICTADD (x k D n – D' −1 or D 0) - like SET but fails if key is already present
;;// returns (dict, ok?)
(cell, int) pfxdict_add(cell dict, int max_key_len, slice key, slice value) 
  asm(value key dict max_key_len) "PFXDICTADD";

;;// PFXDICTDEL (k D n – D' −1 or D 0)
;;// returns (dict, ok?)
(cell, int) pfxdict_delete(cell dict, int max_key_len, slice key) 
  asm(key dict max_key_len) "PFXDICTDEL";
