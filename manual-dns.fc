;; // Manual DNS smart contract

;; // Implementation

(int, int, cell) load_storage() impure {
  var s = get_data().begin_parse();
  var (seqno, public_key, root_dict) = (s~load_uint(32), s~load_uint(256), s~load_dict());
  s.end_parse();
  return (seqno, public_key, root_dict);
}

() set_storage(int seqno, int public_key, cell root_dict) impure {
    set_data(begin_cell()
      .store_uint(seqno, 32)
      .store_uint(public_key, 256)
      .store_dict(root_dict)
      .end_cell());
}

(int, slice) verify_message(slice in_msg, int public_key, int stored_seqno) impure {
  var signature = in_msg~load_bits(512);
  throw_unless(32, check_signature(slice_hash(in_msg), signature, public_key));
  var (seqno, op) = (in_msg~load_uint(32), in_msg~load_int(32));
  throw_unless(33, seqno == stored_seqno);
  throw_unless(34, -1 <= op);
  throw_unless(34, op <= 1); ;; // no &&?
  return (op, in_msg);
}

cell handle_register(slice message, cell stored_dict) impure {
  var name = message~load_ref().begin_parse();
  var dns_dict = message~load_ref();
  message.end_parse();
  var ok? = stored_dict~pfxdict_set(1023, name, dns_dict.begin_parse());
  throw_unless(35, ok?);
  return stored_dict;
}

int handle_change_owner(slice message) impure {
  var new_public_key = message~load_uint(256);
  message.end_parse();
  return new_public_key;
}

(int, cell) handle_dnsresolve(cell root_dict, slice query, int category) {
  dump_stack();
  var (key, value, rem_query, found?) = pfxdict_get?(root_dict, 1023, query);
  if found? {
    var dict = value.to_cell();
    var key_bits = key.slice_bits();
    if key_bits == query.slice_bits() { ;;// successfully fetched target item
      if category == 0 { ;;// return entire dict
        return (key_bits / 8, dict);
      } else { ;;// fetch requested category
        (var category_value, found?) = idict_get?(dict, 16, category);
        if found? {
          return (key_bits / 8, category_value.to_cell());
        } else {
          return (key_bits / 8, new_dict()); 
        }
      }
    } else { ;;// returning intermidiate item category=-1
      (var category_value, found?) = idict_get?(dict, 16, -1);
      if found? {
        return (key_bits / 8, category_value.to_cell());
      } else {
        return (-1, new_dict()); ;;// no redirect data
      }
    }
  } else {
    return (-1, new_dict()) ;
  }
}

;; // Public API

() recv_internal(slice in_msg) impure {
}

() recv_external(slice in_msg) impure { 
  
  var (seqno, public_key, root_dict) = load_storage();
  var (op, message) = verify_message(in_msg, public_key, seqno);
  accept_message();

  if op == 0 { ;; // register
    root_dict = handle_register(message, root_dict);
  } 
  if op == 1 { ;; // change owner
    public_key = handle_change_owner(message);
  }
  set_storage(seqno + 1, public_key, root_dict);
}

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}

(int, cell) dnsresolve(slice query_string, int category) method_id {
  var root_dict = get_data().begin_parse().skip_bits(32 + 256).preload_dict();
  return handle_dnsresolve(root_dict, query_string, category);
}
